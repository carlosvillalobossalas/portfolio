---
import ThemeToggle from "./ThemeToggle.astro";
import { languages } from "../i18n/ui";
import { getLangFromUrl, useTranslations } from "../i18n/utils";
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const navItems = [
  {
    title: t("nav.experience"),
    label: "experience",
    url: `/${lang}#experiencie`,
  },
  {
    title: t("nav.projects"),
    label: "projects",
    url: `/${lang}#projects`,
  },
  {
    title: t("nav.certifications"),
    label: "certifications",
    url: `/${lang}#certifications`,
  },
  {
    title: t("nav.contact"),
    label: "contact",
    url: `/${lang}#contact`,
  },
];
---

<header class="sm:max-w-8xl flex items-center justify-center pt-3">
  <nav class="flex flex-row font-semibold gap-x-1 sm:gap-x-2 items-center">
    {
      navItems.map((item) => (
        <a
          class="relative block transition hover:text-[#7e3636] dark:hover:text-yellow-400 text-sm"
          href={item.url}
          aria-label={item.label}
        >
          {item.title}
        </a>
      ))
    }
    <!-- {
      Object.entries(languages).map(([lang, label]) => (
        <li>
          <a href={`/${lang}/`}>{label}</a>
        </li>
      ))
    } -->
    <ThemeToggle />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");
    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("dark:text-yellow-500");
              item.classList.add("text-[#841818]");
            } else {
              item.classList.remove("dark:text-yellow-500");
              item.classList.remove("text-[#841818]");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  header {
    backdrop-filter: blur(5px);
    position: sticky;
    top: 0px;
    animation: adjust-header linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
    border-radius: 0;
    z-index: 0;
  }
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }
  @keyframes adjust-header {
    to {
      background: rgba(179, 177, 210, 0.5);
      font-size: 11px;
      height: 40px;
      z-index: 99;
      top: 10px;
      border-radius: 20px;
      padding: 0.75rem;
    }
  }
</style>
